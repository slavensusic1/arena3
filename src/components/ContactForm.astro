---
import { getLangFromUrl, useTranslations } from "../i18n/utils";
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<style>
  /* Spinner CSS */
  .spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left-color: #4caf50; /* Spinner color */
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>

<div class="py-20 bg-gray-200" id="contactForm">
  <div class="py-5">
    <p class="text-green-500 text-center font-bold text-lg md:text-2xl">
      {t("contact.headline")}
    </p>
    <h2
      class="text-center font-bold px-3 md:px-0 py-3 text-2xl md:text-4xl md:leading-[50px] max-w-2xl mx-auto"
    >
      {t("contact.para")}
    </h2>
  </div>

  <form
    method="POST"
    id="form"
    class="max-w-4xl mx-auto p-6 rounded-lg space-y-3 md:space-y-6 shadow-2xl"
  >
    <input
      type="hidden"
      name="access_key"
      value="b5fcf576-d476-4315-b1a3-c2851d89328a"
    />

    <!-- Name and Email fields -->
    <div class="md:flex space-y-3 md:gap-10 w-full items-center justify-center">
      <div class="relative md:w-1/2">
        <input type="text" name="name" id="name" required placeholder=" " class="peer w-full border-l-4 border-l-green-500 mt-1 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all shadow-sm hover:shadow-md">
        <label for="name" class="absolute left-3 top-2 text-gray-500 transform -translate-y-2 scale-90 origin-left transition-all duration-200 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-3 peer-focus:-translate-y-2 peer-focus:scale-90">{t('contact.namePlaceHolder')}</label>
      </div>

      <div class="relative md:w-1/2">
        <input type="email" name="email" id="email" required placeholder=" " class="peer w-full border-l-4 border-l-green-500 mt-1 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all shadow-sm hover:shadow-md">
        <label for="email" class="absolute left-3 top-2 text-gray-500 transform -translate-y-2 scale-90 origin-left transition-all duration-200 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-3 peer-focus:-translate-y-2 peer-focus:scale-90">{t('contact.emailPlaceHolder')}</label>
      </div>
    </div>
    <input type="checkbox" name="botcheck" class="hidden" style="display: none;">
    <!-- Subject and Message fields -->
    <div class="relative">
      <input type="text" name="subject" id="subject" required placeholder=" " class="peer w-full border-l-4 border-l-green-500 mt-1 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all shadow-sm hover:shadow-md">
      <label for="subject" class="absolute left-3 top-2 text-gray-500 transform -translate-y-2 scale-90 origin-left transition-all duration-200 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-3 peer-focus:-translate-y-2 peer-focus:scale-90">{t('contact.subjectPlaceHolder')}</label>
    </div>

    <div class="relative">
      <textarea name="message" id="message" required placeholder=" " class="peer w-full mt-1 p-3 h-32 border-l-4 border-l-green-500 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all shadow-sm hover:shadow-md"></textarea>
      <label for="message" class="absolute left-3 top-2 text-gray-500 transform -translate-y-2 scale-90 origin-left transition-all duration-200 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-3 peer-focus:-translate-y-2 peer-focus:scale-90">{t('contact.messagePlaceHolder')}</label>
    </div>

    <!-- Submit button -->
    <div class="flex">
      <button
        type="submit"
        class="w-1/3 py-3 px-6 text-xl font-bold text-white bg-green-500 rounded-md hover:bg-green-600 transition-all"
      >
        {t("contact.btn")}
      </button>
    </div>

    <!-- Spinner Placeholder -->
    <div class="wrapper">
      <svg
        class="checkmark"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 52 52"
      >
        <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none"
        ></circle>
        <path
          class="checkmark__check"
          fill="none"
          d="M14.1 27.2l7.1 7.2 16.7-16.8"></path>
      </svg>
    </div>
    <div
      id="spinner"
      class="text-center text-gray-600 mt-4"
      style="display:none;"
    >

      <div class="spinner"></div>
    </div>
  </form>
</div>
<style>
.wrapper {
    display: flex;
    justify-content: center;
    /* align-items: center; */
    background-color: rgb(229, 231, 235);
    display: none; /* Initially hidden */
}

.checkmark__circle {
    stroke-dasharray: 166;
    stroke-dashoffset: 166;
    stroke-width: 2;
    stroke-miterlimit: 10;
    stroke: #7ac142;
    fill: none;
    animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
}

.checkmark {
  margin: 0;
    width: 56px;
    height: 56px;
    border-radius: 50%;
    display: block;
    stroke-width: 2;
    stroke: #fff;
    stroke-miterlimit: 10;
    margin: -0.1%;
    box-shadow: inset 0px 0px 0px #7ac142;
    animation: fill 0.4s ease-in-out 0.4s forwards, scale 0.3s ease-in-out 0.9s both;
}

.checkmark__check {
    /* transform-origin: 50% 50%; */
    stroke-dasharray: 48;
    stroke-dashoffset: 48;
    animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
}

@keyframes stroke {
    100% {
        stroke-dashoffset: 0;
    }
}

@keyframes scale {
    0%,
    100% {
        transform: none;
    }
    50% {
        /* transform: scale3d(1.1, 1.1, 1); */
    }
}

@keyframes fill {
    100% {
        box-shadow: inset 0px 0px 0px 30px #7ac142;
    }
}
</style>

<script is:inline>
  const form = document.getElementById("form");
  const result = document.getElementById("spinner");
  const spinner = document.querySelector("wrapper");

  form.addEventListener("submit", function (e) {
    e.preventDefault();
    const formData = new FormData(form);

    const object = Object.fromEntries(formData);
    const json = JSON.stringify(object);

    // Show the spinner when submitting
    result.style.display = "block";

    fetch("https://api.web3forms.com/submit", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: json,
    })
      .then(async (response) => {
        let json = await response.json();

  // Hide the spinner and show the checkmark icon
  if (response.status == 200) {
    // Clear the result and show the checkmark

    // Ensure the wrapper is visible
    document.querySelector('.wrapper').style.display = 'flex'; // Ensure the wrapper is visible
    document.querySelector('.spinner').style.display = 'none'; //

} else {
    result.innerHTML = json.message; // Optional error message
}

      })
      .catch((error) => {
        console.log(error);
        result.innerHTML = "Something went wrong!";
      })
      .then(function () {
        form.reset();
        setTimeout(() => {
          result.style.display = "none";
        }, 3000);
      });
  });
</script>
